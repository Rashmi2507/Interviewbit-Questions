https://www.interviewbit.com/problems/shortest-common-superstring/

public class Solution {
    public int solve(String[] A) {
        return shortestSubstring(A);
    }

    public int shortestSubstring(String[] A)
    {
        if(A.length==1)
            return A[0].length();

        int ov = -1;
        int x = -1;
        int y = -1;
        int maxLen = -1;

        for(int i=0; i<A.length; i++)
        {
            for(int j=0; j<A.length; j++)
            {
                if(i==j)
                    continue;

                int o = overlapped(A[i], A[j]);
                if(o > ov || (o == ov && maxLen < A[i].length() + A[j].length() - o))
                {
                    ov = o;
                    x = i;
                    y = j;
                    maxLen = A[i].length() + A[j].length() - o;
                }
            }
        }
        if(ov == -1)
        {
            int r = 0;
            for(String s : A)
                r += s.length();
            return r;
        }

        String s = findOverLap(A[x], A[y], ov);
        String[] ret = new String[A.length-1];
        int ind = 0;
        for(int i=0; i<A.length; i++)
        {
            if(x != i && y != i)
                ret[ind++] = A[i];
        }
        ret[ind] = s;
        return shortestSubstring(ret);
    }

    public int overlapped(String s0, String s1)
    {
        for(int i=0; i<s0.length(); i++)
        {
            if(s1.startsWith(s0.substring(i)))
                return s0.length()-i;
        }
        return -1;
    }

    public String findOverLap(String s0, String s1, int ov)
    {
        StringBuilder sb = new StringBuilder();
        int ind = s0.length() - ov;
        sb.append(s0.substring(0, ind));
        sb.append(s1);
        return sb.toString();
    }
}
